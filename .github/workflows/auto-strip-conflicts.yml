name: Auto clean conflict markers & merge PRs

on:
  # רץ על כל PR (גם ישנים), מהקובץ שב-main
  pull_request_target:
    types: [opened, synchronize, reopened, edited, ready_for_review]
  # כפתור ידני: Actions → "Run workflow" → יתקן את כל ה-PRים הפתוחים
  workflow_dispatch:
    inputs:
      merge_method:
        description: "merge | squash | rebase"
        required: true
        default: "merge"

permissions:
  contents: write
  pull-requests: write

jobs:
  fix_and_merge:
    runs-on: ubuntu-latest

    steps:
      - name: Figure out PR list (single on PR event, all on manual)
        id: prs
        uses: actions/github-script@v7
        with:
          script: |
            const isDispatch = context.eventName === 'workflow_dispatch';
            const mergeMethod = isDispatch
              ? core.getInput('merge_method')
              : 'merge';

            let prs = [];
            if (isDispatch) {
              // כל ה-PRים הפתוחים בריפו
              const { data } = await github.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });
              prs = data;
            } else {
              prs = [context.payload.pull_request];
            }

            // נשמור כ-JSON מוצפן לפסיעה הבאה
            core.setOutput('merge_method', mergeMethod);
            core.setOutput('prs', JSON.stringify(prs.map(p => ({
              number: p.number,
              headRef: p.head.ref,
              headRepo: p.head.repo.full_name,
              baseRef: p.base.ref,
              isFork: p.head.repo.full_name !== `${context.repo.owner}/${context.repo.repo}`
            }))));

      - name: Clean & push changes for each PR (skip forks)
        if: ${{ steps.prs.outputs.prs != '' }}
        env:
          PRS_JSON: ${{ steps.prs.outputs.prs }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "$PRS_JSON" | jq -c '.[]' | while read -r pr; do
            num=$(echo "$pr" | jq -r '.number')
            headRef=$(echo "$pr" | jq -r '.headRef')
            headRepo=$(echo "$pr" | jq -r '.headRepo')
            baseRef=$(echo "$pr" | jq -r '.baseRef')
            isFork=$(echo "$pr" | jq -r '.isFork')

            echo "=== PR #$num  ($headRepo:$headRef -> $baseRef)"
            if [ "$isFork" = "true" ]; then
              echo "Fork detected — skipping push for safety."
              gh pr comment "$num" -b "⚠️ זה PR מ-fork, לא דוחפים לשם אוטומטית. בבקשה עדכן את הענף מול $baseRef או אשר לי להציע תיקון כ-PR."
              continue
            fi

            # נבנה תיקייה נקייה לכל PR
            workdir="$(mktemp -d)"
            git init -q "$workdir"
            cd "$workdir"
            git remote add origin "https://github.com/${{ github.repository }}.git"
            git fetch -q origin "$headRef" "$baseRef"
            git checkout -q -b "$headRef" "origin/$headRef"

            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

            set +e
            git merge --no-commit --no-ff "origin/$baseRef"
            mstatus=$?
            set -e

            if [ $mstatus -eq 0 ]; then
              echo "No conflicts to reproduce. Aborting merge."
              git merge --abort || true
            else
              # נקי סימוני קונפליקט רק בקבצים בעייתיים
              UNMERGED=$(git diff --name-only --diff-filter=U || true)
              if [ -n "$UNMERGED" ]; then
                echo "$UNMERGED" | while read -r f; do
                  [ -z "$f" ] && continue
                  sed -i '/^<<<<<<< .*$/d;/^=======$/d;/^>>>>>>> .*$/d' "$f"
                  git add -- "$f"
                  echo "Cleaned: $f"
                done
                git commit -m "chore: strip conflict markers (auto)"
                git push -q origin "HEAD:$headRef"
              else
                echo "No unmerged files after merge attempt."
                git merge --abort || true
              fi
            fi

            cd -
            rm -rf "$workdir"
          done

      - name: Try auto-merge cleaned PRs
        uses: actions/github-script@v7
        with:
          script: |
            const prs = JSON.parse(`${{ toJson(steps.prs.outputs.prs) }}`);
            const method = `${{ steps.prs.outputs.merge_method }}`;
            for (const p of prs) {
              try {
                // נבדוק סטטוס מיזוג
                const { data } = await github.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: p.number
                });
                if (!data.mergeable) {
                  core.info(`PR #${p.number} not mergeable yet (${data.mergeable_state}); skipping.`);
                  continue;
                }
                await github.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: p.number,
                  merge_method: method
                });
                core.info(`Merged PR #${p.number} with ${method}.`);
              } catch (e) {
                core.info(`Could not merge PR #${p.number}: ${e.message}`);
              }
            }
