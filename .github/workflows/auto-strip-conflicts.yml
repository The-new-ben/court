name: Auto clean conflict markers & merge PRs

on:
  pull_request_target:
    types: [opened, synchronize, reopened, edited, ready_for_review]
  workflow_dispatch:
    inputs:
      merge_method:
        description: "merge method: merge | squash | rebase"
        required: true
        default: "merge"
  schedule:
    - cron: "*/15 * * * *"  # כל 15 דקות עובר על PRים פתוחים

permissions:
  contents: write
  pull-requests: write

jobs:
  clean_and_merge:
    runs-on: ubuntu-latest
    steps:
      - name: Pick PRs list (event → אחד; schedule/button → כולם)
        id: pick
        uses: actions/github-script@v7
        with:
          script: |
            const event = context.eventName;
            const method = event === 'workflow_dispatch'
              ? core.getInput('merge_method')
              : 'merge';
            let prs = [];
            if (event === 'pull_request_target') {
              prs = [context.payload.pull_request];
            } else {
              // schedule / manual → כל ה-PRים הפתוחים
              const all = await github.paginate(
                github.pulls.list,
                { owner: context.repo.owner, repo: context.repo.repo, state: 'open', per_page: 100 }
              );
              prs = all;
            }
            core.setOutput('merge_method', method);
            core.setOutput('prs', JSON.stringify(prs.map(p => ({
              number: p.number,
              headRef: p.head.ref,
              headRepo: p.head.repo.full_name,
              baseRef: p.base.ref,
              isFork: p.head.repo.full_name !== `${context.repo.owner}/${context.repo.repo}`
            }))));

      - name: Clean conflict markers (skip forks for safety)
        if: ${{ steps.pick.outputs.prs != '' }}
        env:
          PRS_JSON: ${{ steps.pick.outputs.prs }}
        run: |
          set -euo pipefail
          echo "$PRS_JSON" | jq -c '.[]' | while read -r pr; do
            num=$(echo "$pr" | jq -r '.number')
            headRef=$(echo "$pr" | jq -r '.headRef')
            headRepo=$(echo "$pr" | jq -r '.headRepo')
            baseRef=$(echo "$pr" | jq -r '.baseRef')
            isFork=$(echo "$pr" | jq -r '.isFork')

            echo "=== PR #$num  ($headRepo:$headRef -> $baseRef)"
            if [ "$isFork" = "true" ]; then
              echo "Fork detected — skipping push (בטיחות)."
              continue
            fi

            workdir="$(mktemp -d)"
            git init -q "$workdir"
            cd "$workdir"
            git remote add origin "https://github.com/${{ github.repository }}.git"
            git fetch -q origin "$headRef" "$baseRef"
            git checkout -q -b prs-head "origin/$headRef"

            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

            set +e
            git merge --no-commit --no-ff "origin/$baseRef"
            mstatus=$?
            set -e

            if [ $mstatus -eq 0 ]; then
              echo "No conflicts to reproduce."
              git merge --abort || true
            else
              UNMERGED=$(git diff --name-only --diff-filter=U || true)
              if [ -n "$UNMERGED" ]; then
                echo "$UNMERGED" | while read -r f; do
                  [ -z "$f" ] && continue
                  # מוחק רק את השורות של הסימונים
                  sed -i '/^<<<<<<< .*$/d;/^=======$/d;/^>>>>>>> .*$/d' "$f"
                  git add -- "$f"
                  echo "Cleaned: $f"
                done
                git commit -m "chore: strip conflict markers (auto)"
                git push -q origin "HEAD:$headRef"
              else
                echo "No unmerged files after merge attempt."
                git merge --abort || true
              fi
            fi

            cd -
            rm -rf "$workdir"
          done

      - name: Try auto-merge
        uses: actions/github-script@v7
        with:
          script: |
            const prs = JSON.parse(`${{ toJson(steps.pick.outputs.prs) }}`);
            const method = `${{ steps.pick.outputs.merge_method }}`;
            for (const p of prs) {
              try {
                const { data } = await github.pulls.get({
                  owner: context.repo.owner, repo: context.repo.repo, pull_number: p.number
                });
                if (!data.mergeable) {
                  core.info(`PR #${p.number} not mergeable (${data.mergeable_state})`);
                  continue;
                }
                await github.pulls.merge({
                  owner: context.repo.owner, repo: context.repo.repo,
                  pull_number: p.number, merge_method: method
                });
                core.info(`Merged PR #${p.number} (${method}).`);
              } catch (e) {
                core.info(`Skip PR #${p.number}: ${e.message}`);
              }
            }
